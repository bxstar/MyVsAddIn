@*单个SOA函数的模版，参数是C#基本类型*@
@using SOAModel
@using System.Web.Razor
<xs:element name="@(Model.FunctionName)Request" type="@(Model.FunctionName)RequestType" />
<xs:complexType name="@(Model.FunctionName)RequestType">
    <xs:annotation>
        <xs:documentation>
            @(Model.FunctionSummary)
        </xs:documentation>
        <xs:appinfo>
        </xs:appinfo>
    </xs:annotation>
    <xs:sequence>
        @foreach (ParameterModel para in Model.LstInputPara)
        {
            if (para.IsBasicCSharpType)
            {//基本C#类型
				if (para.IsSignleElement)
                {
					<xs:element name="@para.ParameterName" type="xs:@para.ParameterTypeFullName" minOccurs="0" @para.StrIsNillableInXSD >
						<xs:annotation>
							<xs:documentation>
								@para.ParameterSummary
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				}
				else
				{
					<xs:element name="@para.ParameterName" type="xs:@para.ParameterTypeFullName" maxOccurs="unbounded" @para.StrIsNillableInXSD >
						<xs:annotation>
							<xs:documentation>
								@para.ParameterSummary
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				}
            }
            else
            {//自定义类型
				if (para.IsSignleElement)
                {
					<xs:element name="@para.ParameterName" type="@para.ParameterTypeFullName" minOccurs="0" @para.StrIsNillableInXSD >
						<xs:annotation>
							<xs:documentation>
								@para.ParameterSummary
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				}
				else
				{
					<xs:element name="@para.ParameterName" type="@para.ParameterTypeFullName" maxOccurs="unbounded" @para.StrIsNillableInXSD >
						<xs:annotation>
							<xs:documentation>
								@para.ParameterSummary
							</xs:documentation>
						</xs:annotation>
					</xs:element>
				}
            }
        }
    </xs:sequence>
</xs:complexType>

<xs:element name="@(Model.FunctionName)Response" type="@(Model.FunctionName)ResponseType" />
<xs:complexType name="@(Model.FunctionName)ResponseType">
    <xs:annotation>
        <xs:documentation>
            @(Model.ReturnSummary)
        </xs:documentation>
        <xs:appinfo>
        </xs:appinfo>
    </xs:annotation>
    <xs:sequence>
        <xs:element name="ResponseStatus" type="ns1:ResponseStatusType" />
        <xs:element name="Result" type="ns2:OperateResultType" />
        @foreach (ParameterModel para in Model.LstOutputPara)
        {
            if (para.IsBasicCSharpType)
            {//基本C#类型
                if (para.IsSignleElement)
                {
                    <xs:element name="@para.ParameterName" type="xs:@para.ParameterTypeFullName" minOccurs="0" @para.StrIsNillableInXSD >
                        <xs:annotation>
                            <xs:documentation>
                                @para.ParameterSummary
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                }
                else
                {
                    <xs:element name="@para.ParameterName" type="xs:@para.ParameterTypeFullName" maxOccurs="unbounded" @para.StrIsNillableInXSD >
                        <xs:annotation>
                            <xs:documentation>
                                @para.ParameterSummary
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                }
            }
            else
            {//自定义类型
                if (para.IsSignleElement)
                {
                    <xs:element name="@para.ParameterName" type="@para.ParameterTypeFullName" minOccurs="0" @para.StrIsNillableInXSD >
                        <xs:annotation>
                            <xs:documentation>
                                @para.ParameterSummary
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                }
                else
                {
                    <xs:element name="@para.ParameterName" type="@para.ParameterTypeFullName" maxOccurs="unbounded" @para.StrIsNillableInXSD >
                        <xs:annotation>
                            <xs:documentation>
                                @para.ParameterSummary
                            </xs:documentation>
                        </xs:annotation>
                    </xs:element>
                }
            }
        }
    </xs:sequence>
</xs:complexType>

@*如果输入或输出参数有用户自定义的类型，则需要生成自定义参数类型的描述*@
@foreach (ParameterModel para in Model.LstAllCustomPara)
{

    <xs:complexType name="@para.ParameterTypeFullName">
        <xs:annotation>
            <xs:documentation>
                @para.ParameterSummary
            </xs:documentation>
            <xs:appinfo>
            </xs:appinfo>
        </xs:annotation>
        <xs:sequence>
            @foreach (ParameterModel leafPara in para.LeafPara)
            {
                if (leafPara.IsBasicCSharpType)
                {//基本C#类型
                    if (leafPara.IsSignleElement)
					{
						<xs:element name="@leafPara.ParameterName" type="xs:@leafPara.ParameterTypeFullName" minOccurs="0" @leafPara.StrIsNillableInXSD >
							<xs:annotation>
								<xs:documentation>
									@leafPara.ParameterSummary
								</xs:documentation>
							</xs:annotation>
						</xs:element>
					}
					else
					{
						<xs:element name="@leafPara.ParameterName" type="xs:@leafPara.ParameterTypeFullName" maxOccurs="unbounded" @leafPara.StrIsNillableInXSD >
							<xs:annotation>
								<xs:documentation>
									@leafPara.ParameterSummary
								</xs:documentation>
							</xs:annotation>
						</xs:element>
					}
                }
                else
                {//有第二层自定义参数类型,都是为string，Json格式来处理
                    if (leafPara.IsSignleElement)
					{
						<xs:element name="@leafPara.ParameterName" type="xs:string" minOccurs="0" @leafPara.StrIsNillableInXSD >
							<xs:annotation>
								<xs:documentation>
									@leafPara.ParameterSummary
								</xs:documentation>
							</xs:annotation>
						</xs:element>
					}
					else
					{
						<xs:element name="@leafPara.ParameterName" type="xs:string" maxOccurs="unbounded" @leafPara.StrIsNillableInXSD >
							<xs:annotation>
								<xs:documentation>
									@leafPara.ParameterSummary
								</xs:documentation>
							</xs:annotation>
						</xs:element>
					}
                }
            }
        </xs:sequence>
    </xs:complexType>

}