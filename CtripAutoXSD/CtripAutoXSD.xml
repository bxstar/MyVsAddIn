<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CtripAutoXSD</name>
    </assembly>
    <members>
        <member name="M:CtripAutoXSD.Utils.GetXSDTypeFromCSharpType(System.String)">
            <summary>
            从CSharp类型转换为XSD类型
            </summary>
        </member>
        <member name="M:CtripAutoXSD.Utils.IsCSharpBasicType(System.String)">
            <summary>
            是否是C#基本类型
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:CtripAutoXSD.Utils.IsNillableType(System.String)">
            <summary>
            是否是可为null的类型
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:CtripAutoXSD.Utils.GetTypeFullName(System.String)">
            <summary>
            用于程序集反射
            </summary>
            <param name="typeName">类型名，可能是List类型</param>
            <returns></returns>
        </member>
        <member name="P:SOAModel.CtripXSDModel.LstFunc">
            <summary>
            由多个方法组成的XSD文件模型
            </summary>
        </member>
        <member name="P:SOAModel.FunctionModel.FunctionName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:SOAModel.FunctionModel.FunctionSummary">
            <summary>
            方法注释
            </summary>
        </member>
        <member name="P:SOAModel.FunctionModel.ReturnSummary">
            <summary>
            返回注释
            </summary>
        </member>
        <member name="P:SOAModel.FunctionModel.LstInputPara">
            <summary>
            输入参数列表
            </summary>
        </member>
        <member name="P:SOAModel.FunctionModel.LstOutputPara">
            <summary>
            输出参数列表
            </summary>
        </member>
        <member name="P:SOAModel.FunctionModel.LstAllCustomPara">
            <summary>
            输入或输出参数中所有自定义类型的参数
            </summary>
        </member>
        <member name="T:SOAModel.ParameterModel">
            <summary>
            参数定义
            </summary>
        </member>
        <member name="F:SOAModel.ParameterModel._isBasicCSharpType">
            <summary>
            默认是基本类型
            </summary>
        </member>
        <member name="F:SOAModel.ParameterModel._isNillable">
            <summary>
            默认是不可为空的类型
            </summary>
        </member>
        <member name="F:SOAModel.ParameterModel._isSignleElement">
            <summary>
            默认该参数是单个的
            </summary>
        </member>
        <member name="P:SOAModel.ParameterModel.ParameterName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:SOAModel.ParameterModel.ParameterTypeFullName">
            <summary>
            参数类型，如果是复合类型（非C#中的基本类型），还需要反射生成下面的类型定义
            </summary>
        </member>
        <member name="P:SOAModel.ParameterModel.ParameterSummary">
            <summary>
            参数的注释
            </summary>
        </member>
        <member name="P:SOAModel.ParameterModel.IsBasicCSharpType">
            <summary>
            是否是C#中的基本类型
            </summary>
        </member>
        <member name="P:SOAModel.ParameterModel.IsNillable">
            <summary>
            是否是可为null类型
            </summary>
        </member>
        <member name="P:SOAModel.ParameterModel.StrIsNillableInXSD">
            <summary>
            可为null的xsd中显示
            </summary>
        </member>
        <member name="P:SOAModel.ParameterModel.IsSignleElement">
            <summary>
            是否是单个元素
            </summary>
        </member>
        <member name="P:SOAModel.ParameterModel.LeafPara">
            <summary>
            自定义参数类型的参数列表
            </summary>
        </member>
        <member name="T:CtripAutoXSD.Connect">
            <summary>用于实现外接程序的对象。</summary>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:CtripAutoXSD.Connect.#ctor">
            <summary>实现外接程序对象的构造函数。请将您的初始化代码置于此方法内。</summary>
        </member>
        <member name="M:CtripAutoXSD.Connect.OnConnection(System.Object,Extensibility.ext_ConnectMode,System.Object,System.Array@)">
            <summary>实现 IDTExtensibility2 接口的 OnConnection 方法。接收正在加载外接程序的通知。</summary>
            <param term='application'>宿主应用程序的根对象。</param>
            <param term='connectMode'>描述外接程序的加载方式。</param>
            <param term='addInInst'>表示此外接程序的对象。</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:CtripAutoXSD.Connect.OnDisconnection(Extensibility.ext_DisconnectMode,System.Array@)">
            <summary>实现 IDTExtensibility2 接口的 OnDisconnection 方法。接收正在卸载外接程序的通知。</summary>
            <param term='disconnectMode'>描述外接程序的卸载方式。</param>
            <param term='custom'>特定于宿主应用程序的参数数组。</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:CtripAutoXSD.Connect.OnAddInsUpdate(System.Array@)">
            <summary>实现 IDTExtensibility2 接口的 OnAddInsUpdate 方法。当外接程序集合已发生更改时接收通知。</summary>
            <param term='custom'>特定于宿主应用程序的参数数组。</param>
            <seealso class='IDTExtensibility2' />		
        </member>
        <member name="M:CtripAutoXSD.Connect.OnStartupComplete(System.Array@)">
            <summary>实现 IDTExtensibility2 接口的 OnStartupComplete 方法。接收宿主应用程序已完成加载的通知。</summary>
            <param term='custom'>特定于宿主应用程序的参数数组。</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:CtripAutoXSD.Connect.OnBeginShutdown(System.Array@)">
            <summary>实现 IDTExtensibility2 接口的 OnBeginShutdown 方法。接收正在卸载宿主应用程序的通知。</summary>
            <param term='custom'>特定于宿主应用程序的参数数组。</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:CtripAutoXSD.Connect.QueryStatus(System.String,EnvDTE.vsCommandStatusTextWanted,EnvDTE.vsCommandStatus@,System.Object@)">
            <summary>实现 IDTCommandTarget 接口的 QueryStatus 方法。此方法在更新该命令的可用性时调用</summary>
            <param term='commandName'>要确定其状态的命令的名称。</param>
            <param term='neededText'>该命令所需的文本。</param>
            <param term='status'>该命令在用户界面中的状态。</param>
            <param term='commandText'>neededText 参数所要求的文本。</param>
            <seealso class='Exec' />
        </member>
        <member name="M:CtripAutoXSD.Connect.Exec(System.String,EnvDTE.vsCommandExecOption,System.Object@,System.Object@,System.Boolean@)">
            <summary>实现 IDTCommandTarget 接口的 Exec 方法。此方法在调用该命令时调用。</summary>
            <param term='commandName'>要执行的命令的名称。</param>
            <param term='executeOption'>描述该命令应如何运行。</param>
            <param term='varIn'>从调用方传递到命令处理程序的参数。</param>
            <param term='varOut'>从命令处理程序传递到调用方的参数。</param>
            <param term='handled'>通知调用方此命令是否已被处理。</param>
            <seealso class='Exec' />
        </member>
    </members>
</doc>
